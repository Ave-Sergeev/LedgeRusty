use std::{cell::RefCell, rc::Rc};use easy_repl::{command, CommandStatus, Repl};use crate::service::blockchain::Blockchain;use crate::service::state::State;pub fn run_loop() {    loop {        let state: State = State::new(1usize);        let difficulty: Rc<RefCell<usize>> = state.difficulty;        let ref_diff_one: Rc<RefCell<usize>> = Rc::clone(&difficulty);        let ref_diff_two: Rc<RefCell<usize>> = Rc::clone(&difficulty);        let blockchain: Rc<RefCell<Blockchain>> = state.blockchain;        let ref_blockchain_one: Rc<RefCell<Blockchain>> = Rc::clone(&blockchain);        let ref_blockchain_two: Rc<RefCell<Blockchain>> = Rc::clone(&blockchain);        let ref_blockchain_three: Rc<RefCell<Blockchain>> = Rc::clone(&blockchain);        let ref_blockchain_four: Rc<RefCell<Blockchain>> = Rc::clone(&blockchain);        let mut repl = Repl::builder()            .description("The default difficulty level is one.")            .prompt("> ")            .add(                "diff",                command! {                    "Set difficulty value",                    (:usize) => |value: usize| {                        *ref_diff_one.borrow_mut() = value;                        println!("Difficulty level set");                        Ok(CommandStatus::Done)                    }                },            )            .add(                "create",                command! {                    "Create genesis block",                    () => || {                        let current_difficulty = *ref_diff_two.borrow();                        let blockchain = ref_blockchain_one.borrow();                        let mut blockchain_mut = ref_blockchain_two.borrow().clone();                        if blockchain.chain.len() == 1usize {                            blockchain_mut.update(current_difficulty);                            println!("Genesis block created (updated)");                        } else {                            println!("Genesis block already exists");                        }                        Ok(CommandStatus::Done)                    }                },            )            .add(                "read",                command! {                    "View all blocks in the chain",                    () => || {                        let mut blockchain = ref_blockchain_three.borrow_mut();                        blockchain.get_all_blocks();                        Ok(CommandStatus::Done)                    }                },            )            .add(                "add",                command! {                    "Add new block in chain",                    () => || {                        let mut blockchain = ref_blockchain_four.borrow_mut();                        blockchain.add_block();                        Ok(CommandStatus::Done)                    }                },            )            .add(                "check",                command! {                    "Checking the integrity of the chain",                    () => || {                        println!("Not implemented");                        Ok(CommandStatus::Done)                    }                },            )            .build()            .expect("Failed to create REPL");        repl.run().expect("Critical REPL error");    }}